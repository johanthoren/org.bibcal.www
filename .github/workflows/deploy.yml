name: Deployment

on:
  push:
    tags:
      - '*.*.*'

jobs:
  lint:

    runs-on: ubuntu-latest

    steps:
      - name: Install clojure tools
        uses: DeLaGuardo/setup-clojure@11.0
        with:
          clj-kondo: 'latest'

      - uses: actions/checkout@v3

      - name: Get clj-kondo version
        run: clj-kondo --version

      - name: clj-kondo
        run: clj-kondo --lint src

      # Disabled until kibit allows disabling select rules.
      # - name: Install lein deps
      #   run: lein deps

      # - name: Lein Kibit
      #   run: lein kibit

  lein_test:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Install dependencies
      run: lein deps

    - name: Run tests
      run: lein test
      env:
        LOCATIONIQ_API_KEY: ${{ secrets.LOCATIONIQ_API_KEY }}
        IPGEOLOCATION_API_KEY: ${{ secrets.IPGEOLOCATION_API_KEY }}

  build_war:
    name: Build WAR

    needs:
      - lint
      - lein_test

    runs-on: ubuntu-latest

    strategy:
      fail-fast: true
      matrix:
        target:
          - standalone.war

    steps:

      - name: Get tag
        id: tag
        uses: dawidd6/action-get-tag@v1

      - uses: actions/checkout@v3

      - name: Install dependencies
        run: lein deps

      - name: Build WAR
        run: lein ring uberwar
        env:
          LOCATIONIQ_API_KEY: ${{ secrets.LOCATIONIQ_API_KEY }}
          IPGEOLOCATION_API_KEY: ${{ secrets.IPGEOLOCATION_API_KEY }}

      - name: Move and rename WAR
        run: mv target/www-${{ steps.tag.outputs.tag }}-standalone.war ./org.bibcal.www-${{ steps.tag.outputs.tag }}-standalone.war

      - name: Print the current state of the directory
        run: ls -alh

      - name: Upload WAR
        id: upload
        uses: actions/upload-artifact@v2
        with:
          name: org.bibcal.www-${{ steps.tag.outputs.tag }}-standalone.war
          path: org.bibcal.www-${{ steps.tag.outputs.tag }}-standalone.war

  create_release:
    name: Create Release

    needs:
      - lint
      - lein_test
      - build_war

    runs-on: ubuntu-latest

    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_tag: ${{ steps.tag.outputs.tag }}

    steps:
      - uses: actions/checkout@v3

      - name: Get tag
        id: tag
        uses: dawidd6/action-get-tag@v1

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.1.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          release_name: Release ${{github.ref}}
          draft: false
          prerelease: false

  sign_release_assets:
    name: Sign Release Assets

    needs:
      - build_war
      - create_release

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Download artifact (WAR)
        uses: actions/download-artifact@v2.0.5
        with:
          name: org.bibcal.www-${{ needs.create_release.outputs.release_tag }}-standalone.war

      - name: Display current directory
        run: ls -alh

      - name: Sign artifact
        uses: tristan-weil/ghaction-checksum-sign-artifact@v1.0.1
        with:
          checksum_output: 'one_file_per_digest'
          sign_output: 'checksum_detach'
          path: 'org.bibcal.www-*'
          sign_key: '${{ secrets.SIGN_KEY }}'
          sign_key_passphrase: '${{ secrets.SIGN_KEY_PASSPHRASE }}'
          sign_key_fingerprint: '${{ secrets.SIGN_KEY_FINGERPRINT }}'
          sign_keyserver: '${{ secrets.SIGN_KEY_KEYSERVER }}'

      - name: Print the current state of the directory
        run: ls -Ralh

      - name: Upload checksum artifact
        uses: actions/upload-artifact@v2
        with:
          name: SHA256SUMS
          path: SHA256SUMS

      - name: Upload signature artifact
        uses: actions/upload-artifact@v2
        with:
          name: SHA256SUMS.asc
          path: SHA256SUMS.asc

  upload_release_assets:
    name: Upload Release Assets

    needs:
      - build_war
      - create_release
      - sign_release_assets

    runs-on: ubuntu-latest

    strategy:
      fail-fast: true
      matrix:
        target:
          - standalone.war

    steps:
      - uses: actions/checkout@v3

      - name: Download checksum artifact
        uses: actions/download-artifact@v2.0.5
        with:
          name: SHA256SUMS

      - name: Download signature artifact
        uses: actions/download-artifact@v2.0.5
        with:
          name: SHA256SUMS.asc

      - name: Download artifact (WAR)
        uses: actions/download-artifact@v2.0.5
        with:
          name: org.bibcal.www-${{ needs.create_release.outputs.release_tag }}-standalone.war

      - name: Print the current state of the directory
        run: ls -Ralh

      - name: Release web archive (WAR)
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./org.bibcal.www-${{ needs.create_release.outputs.release_tag }}-standalone.war
          asset_name: org.bibcal.www-${{ needs.create_release.outputs.release_tag }}-standalone.war
          asset_content_type: application/java-archive

      - name: Release checksum
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./SHA256SUMS
          asset_name: SHA256SUMS
          asset_content_type: text/plain

      - name: Release signature
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./SHA256SUMS.asc
          asset_name: SHA256SUMS.asc
          asset_content_type: text/plain

  deploy_to_staging:
    name: Deploy to staging

    needs:
      - build_war
      - create_release
      - sign_release_assets
      - upload_release_assets

    runs-on: ubuntu-latest

    strategy:
      fail-fast: true
      matrix:
        target:
          - org.bibcal.www-${{ needs.create_release.outputs.release_tag }}-standalone.war

    steps:
      - uses: actions/checkout@v3

      - name: Download artifact (WAR)
        uses: actions/download-artifact@v2.0.5
        with:
          name: ${{ matrix.target }}

      - name: SSH actions
        uses: alinz/ssh-scp-action@master
        env:
          WAR: ${{ matrix.target }}
          WEBAPPS: "/var/lib/tomcat9/webapps"
        with:
          key: ${{ secrets.SSH_KEY }}
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          user: ${{ secrets.SSH_USER }}

          scp: |
            $WAR ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:

          ssh_after: |
            ls -lah
            sudo rm -rf ${WEBAPPS}/staging*
            sudo cp $WAR ${WEBAPPS}/staging.war
            sudo chown root:tomcat ${WEBAPPS}/staging.war

      - name: Sleep for 10 seconds
        run: sleep 10s

  verify_staging:
    name: Verify staging

    needs:
      - build_war
      - create_release
      - sign_release_assets
      - upload_release_assets
      - deploy_to_staging

    runs-on: ubuntu-latest

    strategy:
      fail-fast: true
      matrix:
        target:
          - ${{ needs.create_release.outputs.release_tag }}

    steps:

      - name: Wait a bit longer for tomcat to load
        run: sleep 10s

      - name: Grep for current version number
        run: |
          curl -sL https://www.bibcal.org/staging | grep ">${{ matrix.target }}</a>"

  deploy_to_production:
    name: Deploy to production

    needs:
      - build_war
      - create_release
      - sign_release_assets
      - upload_release_assets
      - deploy_to_staging
      - verify_staging

    runs-on: ubuntu-latest

    strategy:
      fail-fast: true
      matrix:
        target:
          - org.bibcal.www-${{ needs.create_release.outputs.release_tag }}-standalone.war

    steps:
      - uses: actions/checkout@v3

      - name: Download artifact (WAR)
        uses: actions/download-artifact@v2.0.5
        with:
          name: ${{ matrix.target }}

      - name: SSH actions
        uses: alinz/ssh-scp-action@master
        env:
          WAR: ${{ matrix.target }}
          WEBAPPS: "/var/lib/tomcat9/webapps"
        with:
          key: ${{ secrets.SSH_KEY }}
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          user: ${{ secrets.SSH_USER }}

          scp: |
            $WAR ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:

          ssh_after: |
            ls -lah
            sudo rm -rf ${WEBAPPS}/ROOT*
            sudo cp $WAR ${WEBAPPS}/ROOT.war
            sudo chown root:tomcat ${WEBAPPS}/ROOT.war
            sudo systemctl restart tomcat9

      - name: Sleep for 10 seconds
        run: sleep 10s

  verify_production:
    name: Verify production

    needs:
      - build_war
      - create_release
      - sign_release_assets
      - upload_release_assets
      - deploy_to_staging
      - verify_staging
      - deploy_to_production

    runs-on: ubuntu-latest

    strategy:
      fail-fast: true
      matrix:
        target:
          - ${{ needs.create_release.outputs.release_tag }}

    steps:

      - name: Wait a bit longer for tomcat to load
        run: sleep 10s

      - name: Grep for current version number
        run: |
          curl -sL https://www.bibcal.org | grep ">${{ matrix.target }}</a>"
